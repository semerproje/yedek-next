'use client';

import { useState, useEffect } from 'react';

interface DashboardStats {
  total_news: number;
  published_news: number;
  draft_news: number;
  last_fetch: string;
}

interface CategoryMapping {
  id: string;
  aa_id: number;
  aa_name: string;
  site_slug: string;
  site_name: string;
  active: boolean;
  auto_fetch: boolean;
  priority: number;
  color: string;
  icon: string;
}

interface AACategory {
  id: number;
  name: string;
  turkish_name: string;
}

interface SiteCategory {
  slug: string;
  name: string;
  color: string;
  icon: string;
}

interface News {
  id: string;
  title: string;
  category: string;
  status: 'draft' | 'published' | 'archived';
  publish_date: Date;
  ai_enhanced: boolean;
  images: string[];
  breaking_news: boolean;
}

interface Schedule {
  id: string;
  name: string;
  categories: string[];
  frequency: string;
  next_run: Date;
  active: boolean;
}

export default function UltraPremiumAAManager() {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [isLoading, setIsLoading] = useState(false);
  const [stats, setStats] = useState<DashboardStats>({
    total_news: 0,
    published_news: 0,
    draft_news: 0,
    last_fetch: ''
  });
  const [categoryMappings, setCategoryMappings] = useState<CategoryMapping[]>([]);
  const [aaCategories, setAACategories] = useState<AACategory[]>([]);
  const [siteCategories, setSiteCategories] = useState<SiteCategory[]>([]);
  const [news, setNews] = useState<News[]>([]);
  const [schedules, setSchedules] = useState<Schedule[]>([]);

  // Fetch all data
  const fetchDashboardData = async () => {
    try {
      setIsLoading(true);
      
      const [statsRes, mappingsRes, aaCatsRes, siteCatsRes, newsRes, schedulesRes] = await Promise.all([
        fetch('/api/ultra-premium-aa?action=stats'),
        fetch('/api/ultra-premium-aa?action=category-mappings'),
        fetch('/api/ultra-premium-aa?action=aa-categories'),
        fetch('/api/ultra-premium-aa?action=site-categories'),
        fetch('/api/ultra-premium-aa?action=news&limit=100'),
        fetch('/api/ultra-premium-aa?action=schedules')
      ]);

      if (statsRes.ok) {
        const statsData = await statsRes.json();
        setStats(statsData.data);
      }

      if (mappingsRes.ok) {
        const mappingsData = await mappingsRes.json();
        setCategoryMappings(mappingsData.data);
      }

      if (aaCatsRes.ok) {
        const aaCatsData = await aaCatsRes.json();
        setAACategories(Object.entries(aaCatsData.data).map(([id, name]) => ({
          id: parseInt(id),
          name: name as string,
          turkish_name: name as string
        })));
      }

      if (siteCatsRes.ok) {
        const siteCatsData = await siteCatsRes.json();
        setSiteCategories(siteCatsData.data);
      }

      if (newsRes.ok) {
        const newsData = await newsRes.json();
        setNews(newsData.data);
      }

      if (schedulesRes.ok) {
        const schedulesData = await schedulesRes.json();
        setSchedules(schedulesData.data);
      }

    } catch (error) {
      console.error('Error fetching dashboard data:', error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchDashboardData();
  }, []);

  // Test functions
  const testAAConnection = async () => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/ultra-premium-aa?action=test-connection');
      const result = await response.json();
      
      if (result.success) {
        alert('✅ AA API Bağlantısı Başarılı!');
      } else {
        alert('❌ AA API Bağlantısı Başarısız: ' + result.message);
      }
    } catch (error) {
      alert('❌ Bağlantı Hatası: ' + error);
    } finally {
      setIsLoading(false);
    }
  };

  const testDiscover = async () => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/ultra-premium-aa?action=discover&language=tr_TR');
      const result = await response.json();
      
      if (result.success) {
        console.log('Discover Data:', result.data);
        alert('✅ Discover Test Başarılı! Console\'u kontrol edin.');
      } else {
        alert('❌ Discover Test Başarısız: ' + result.message);
      }
    } catch (error) {
      alert('❌ Test Hatası: ' + error);
    } finally {
      setIsLoading(false);
    }
  };

  const testGeminiAI = async () => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/ultra-premium-aa', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'enhance-with-ai',
          news: {
            id: 'test-' + Date.now(),
            title: 'Test Haber Başlığı - Türkiye Ekonomisi',
            content: 'Bu bir test haber içeriğidir. Türkiye ekonomisi hakkında önemli gelişmeler yaşanıyor. AI tarafından optimize edilecek.',
            summary: 'Test haber özeti',
            type: 1,
            date: new Date().toISOString(),
            category_id: 1,
            priority_id: 1,
            language_id: 1,
            provider_id: 1
          }
        })
      });
      const result = await response.json();
      
      if (result.success) {
        console.log('AI Enhancement Result:', result.data);
        alert('✅ Gemini AI Test Başarılı! Console\'u kontrol edin.');
      } else {
        alert('❌ AI Test Başarısız: ' + result.message);
      }
    } catch (error) {
      alert('❌ Test Hatası: ' + error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleManualFetch = async (params: any) => {
    try {
      setIsLoading(true);
      
      const response = await fetch('/api/ultra-premium-aa', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'manual-fetch',
          ...params
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        alert(`✅ Başarılı! ${result.data.total_fetched || 0} haber çekildi, ${result.data.processed || 0} işlendi.`);
        fetchDashboardData(); // Refresh data
      } else {
        alert('❌ Hata: ' + result.message);
      }
    } catch (error) {
      alert('❌ Bağlantı hatası: ' + error);
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch dashboard data
  const fetchDashboardData = async () => {
    try {
      setIsLoading(true);
      
      // Get stats
      const statsResponse = await fetch('/api/ultra-premium-aa?action=stats');
      if (statsResponse.ok) {
        const statsData = await statsResponse.json();
        setStats(statsData.data);
      }
      
      // Get category mappings
      const mappingsResponse = await fetch('/api/ultra-premium-aa?action=category-mappings');
      if (mappingsResponse.ok) {
        const mappingsData = await mappingsResponse.json();
        setCategoryMappings(mappingsData.data);
      }
      
      // Get news
      const newsResponse = await fetch('/api/ultra-premium-aa?action=news&limit=50');
      if (newsResponse.ok) {
        const newsData = await newsResponse.json();
        setNews(newsData.data);
      }
      
    } catch (error) {
      console.error('Error fetching dashboard data:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Test functions
  const testAAConnection = async () => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/ultra-premium-aa?action=test-connection');
      const result = await response.json();
      
      if (result.success) {
        alert('✅ AA API Bağlantısı Başarılı!');
      } else {
        alert('❌ AA API Bağlantısı Başarısız: ' + result.message);
      }
    } catch (error) {
      alert('❌ Bağlantı Hatası: ' + error);
    } finally {
      setIsLoading(false);
    }
  };

  const testDiscover = async () => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/ultra-premium-aa?action=discover&language=tr_TR');
      const result = await response.json();
      
      if (result.success) {
        console.log('Discover Data:', result.data);
        alert('✅ Discover Test Başarılı! Console\'u kontrol edin.');
      } else {
        alert('❌ Discover Test Başarısız: ' + result.message);
      }
    } catch (error) {
      alert('❌ Test Hatası: ' + error);
    } finally {
      setIsLoading(false);
    }
  };

  const testSearch = async () => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/ultra-premium-aa', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'search-news',
          categories: [1], // Genel
          limit: 5
        })
      });
      const result = await response.json();
      
      if (result.success) {
        console.log('Search Results:', result.data);
        alert(`✅ Search Test Başarılı! ${result.data?.data?.total || 0} haber bulundu.`);
      } else {
        alert('❌ Search Test Başarısız: ' + result.message);
      }
    } catch (error) {
      alert('❌ Test Hatası: ' + error);
    } finally {
      setIsLoading(false);
    }
  };

  const testSubscription = async () => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/ultra-premium-aa?action=subscription');
      const result = await response.json();
      
      if (result.success) {
        console.log('Subscription Data:', result.data);
        alert('✅ Subscription Test Başarılı! Console\'u kontrol edin.');
      } else {
        alert('❌ Subscription Test Başarısız: ' + result.message);
      }
    } catch (error) {
      alert('❌ Test Hatası: ' + error);
    } finally {
      setIsLoading(false);
    }
  };

  const testAI = async () => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/ultra-premium-aa', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'enhance-with-ai',
          news: {
            id: 'test',
            title: 'Test Haber Başlığı',
            content: 'Bu bir test haber içeriğidir. AI tarafından optimize edilecek.',
            summary: 'Test özeti',
            type: 1,
            date: new Date().toISOString(),
            category_id: 1,
            priority_id: 1,
            language_id: 1,
            provider_id: 1
          }
        })
      });
      const result = await response.json();
      
      if (result.success) {
        console.log('AI Enhancement Result:', result.data);
        alert('✅ AI Test Başarılı! Console\'u kontrol edin.');
      } else {
        alert('❌ AI Test Başarısız: ' + result.message);
      }
    } catch (error) {
      alert('❌ Test Hatası: ' + error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleQuickFetch = async () => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/ultra-premium-aa', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'manual-fetch',
          categories: [1, 2, 3], // Genel, Spor, Ekonomi
          limit: 10,
          auto_process: true,
          auto_publish: false
        })
      });
      const result = await response.json();
      
      if (result.success) {
        alert(`✅ Hızlı Çekim Başarılı! ${result.data.processed} haber işlendi.`);
        fetchDashboardData(); // Refresh data
      } else {
        alert('❌ Hızlı Çekim Başarısız: ' + result.message);
      }
    } catch (error) {
      alert('❌ İşlem Hatası: ' + error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDuplicateCheck = async () => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/ultra-premium-aa', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'duplicate-check'
        })
      });
      const result = await response.json();
      
      if (result.success) {
        const duplicates = result.data.length;
        alert(`✅ Duplicate Check Tamamlandı! ${duplicates} duplicate grup bulundu.`);
      } else {
        alert('❌ Duplicate Check Başarısız: ' + result.message);
      }
    } catch (error) {
      alert('❌ İşlem Hatası: ' + error);
    } finally {
      setIsLoading(false);
    }
  };

  // Manual fetch function
  const handleManualFetch = async (params: any) => {
    try {
      setIsLoading(true);
      
      const response = await fetch('/api/ultra-premium-aa', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'manual-fetch',
          ...params
        })
      });
      
      if (response.ok) {
        const result = await response.json();
        alert(`Başarılı! ${result.data.processed} haber işlendi.`);
        fetchDashboardData(); // Refresh data
      } else {
        alert('Hata oluştu!');
      }
    } catch (error) {
      console.error('Manual fetch error:', error);
      alert('Bağlantı hatası!');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Header */}
        <header className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
                🚀 Ultra Premium AA Manager
              </h1>
              <p className="text-gray-600 dark:text-gray-400">
                AA Ajansı haber çekimi ve yönetim sistemi
              </p>
            </div>
            
            {/* Real-time status */}
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2 px-3 py-2 bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 rounded-lg">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                <span className="text-sm font-medium">Sistem Aktif</span>
              </div>
              
              <button
                onClick={fetchDashboardData}
                className="px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                🔄 Yenile
              </button>
            </div>
          </div>
        </header>

        {/* Loading Overlay */}
        {isLoading && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white dark:bg-gray-800 p-6 rounded-lg">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p className="text-gray-900 dark:text-white">İşlem devam ediyor...</p>
            </div>
          </div>
        )}

        {/* Navigation Tabs */}
        <nav className="mb-8">
          <div className="border-b border-gray-200 dark:border-gray-700">
            <nav className="flex space-x-8 overflow-x-auto">
              {[
                { id: 'dashboard', name: '📊 Dashboard', icon: '📊' },
                { id: 'manual-fetch', name: '📥 Manuel Çekim', icon: '📥' },
                { id: 'categories', name: '🗂️ Kategoriler', icon: '🗂️' },
                { id: 'news-management', name: '📰 Haber Yönetimi', icon: '📰' },
                { id: 'schedules', name: '⏰ Zamanlamalar', icon: '⏰' },
                { id: 'ai-settings', name: '🤖 AI Ayarları', icon: '🤖' }
              ].map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`py-2 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${
                    activeTab === tab.id
                      ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
                  }`}
                >
                  {tab.name}
                </button>
              ))}
            </nav>
          </div>
        </nav>

        {/* Tab Content */}
        <div className="space-y-6">
          {/* Dashboard Tab */}
          {activeTab === 'dashboard' && (
            <DashboardTab stats={stats} />
          )}

          {/* Manual Fetch Tab */}
          {activeTab === 'manual-fetch' && (
            <ManualFetchTab onFetch={handleManualFetch} />
          )}

          {/* Categories Tab */}
          {activeTab === 'categories' && (
            <CategoriesTab mappings={categoryMappings} onUpdate={fetchDashboardData} />
          )}

          {/* News Management Tab */}
          {activeTab === 'news-management' && (
            <NewsManagementTab news={news} onUpdate={fetchDashboardData} />
          )}

          {/* Schedules Tab */}
          {activeTab === 'schedules' && (
            <SchedulesTab schedules={schedules} onUpdate={fetchDashboardData} />
          )}

          {/* AI Settings Tab */}
          {activeTab === 'ai-settings' && (
            <AISettingsTab />
          )}
        </div>
      </div>
    </div>
  );
}

// Dashboard Tab Component
function DashboardTab({ stats }: { stats: DashboardStats }) {
  return (
    <div className="space-y-6">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
          <div className="flex items-center">
            <div className="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
              <span className="text-2xl">📰</span>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Toplam Haber</p>
              <p className="text-2xl font-bold text-gray-900 dark:text-white">{stats.total_news}</p>
            </div>
          </div>
        </div>
        
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
          <div className="flex items-center">
            <div className="p-2 bg-green-100 dark:bg-green-900 rounded-lg">
              <span className="text-2xl">✅</span>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Yayınlanan</p>
              <p className="text-2xl font-bold text-gray-900 dark:text-white">{stats.published_news}</p>
            </div>
          </div>
        </div>
        
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
          <div className="flex items-center">
            <div className="p-2 bg-yellow-100 dark:bg-yellow-900 rounded-lg">
              <span className="text-2xl">📝</span>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Taslak</p>
              <p className="text-2xl font-bold text-gray-900 dark:text-white">{stats.draft_news}</p>
            </div>
          </div>
        </div>
        
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
          <div className="flex items-center">
            <div className="p-2 bg-purple-100 dark:bg-purple-900 rounded-lg">
              <span className="text-2xl">🕐</span>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Son Çekim</p>
              <p className="text-sm font-bold text-gray-900 dark:text-white">
                {stats.last_fetch ? new Date(stats.last_fetch).toLocaleString('tr-TR') : 'Henüz yok'}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          🚀 Hızlı İşlemler
        </h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <button 
            onClick={() => handleQuickFetch()}
            className="flex flex-col items-center p-4 bg-blue-50 dark:bg-blue-900 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-800 transition-colors"
          >
            <span className="text-2xl mb-2">⚡</span>
            <span className="text-sm font-medium text-blue-900 dark:text-blue-100">Hızlı Çekim</span>
          </button>
          
          <button 
            onClick={() => testAI()}
            className="flex flex-col items-center p-4 bg-green-50 dark:bg-green-900 rounded-lg hover:bg-green-100 dark:hover:bg-green-800 transition-colors"
          >
            <span className="text-2xl mb-2">🤖</span>
            <span className="text-sm font-medium text-green-900 dark:text-green-100">AI İşleme</span>
          </button>
          
          <button 
            onClick={() => handleDuplicateCheck()}
            className="flex flex-col items-center p-4 bg-purple-50 dark:bg-purple-900 rounded-lg hover:bg-purple-100 dark:hover:bg-purple-800 transition-colors"
          >
            <span className="text-2xl mb-2">🔍</span>
            <span className="text-sm font-medium text-purple-900 dark:text-purple-100">Duplicate Tespiti</span>
          </button>
          
          <button 
            onClick={() => testAAConnection()}
            className="flex flex-col items-center p-4 bg-orange-50 dark:bg-orange-900 rounded-lg hover:bg-orange-100 dark:hover:bg-orange-800 transition-colors"
          >
            <span className="text-2xl mb-2">⚙️</span>
            <span className="text-sm font-medium text-orange-900 dark:text-orange-100">Sistem Testi</span>
          </button>
        </div>
      </div>

      {/* System Status */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          🔧 Sistem Durumu
        </h3>
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <span className="text-gray-600 dark:text-gray-400">AA API Bağlantısı</span>
            <span className="flex items-center gap-2 text-green-600 dark:text-green-400">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              Aktif
            </span>
          </div>
          
          <div className="flex items-center justify-between">
            <span className="text-gray-600 dark:text-gray-400">Firebase Bağlantısı</span>
            <span className="flex items-center gap-2 text-green-600 dark:text-green-400">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              Aktif
            </span>
          </div>
          
          <div className="flex items-center justify-between">
            <span className="text-gray-600 dark:text-gray-400">Gemini AI</span>
            <span className="flex items-center gap-2 text-green-600 dark:text-green-400">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              Aktif
            </span>
          </div>
          
          <div className="flex items-center justify-between">
            <span className="text-gray-600 dark:text-gray-400">Otomatik Çekim</span>
            <span className="flex items-center gap-2 text-green-600 dark:text-green-400">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              Çalışıyor
            </span>
          </div>
        </div>
      </div>

      {/* System Test Panel */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          🧪 Detaylı Sistem Testleri
        </h3>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3">
          <button
            onClick={testAAConnection}
            className="flex flex-col items-center p-3 bg-blue-50 dark:bg-blue-900 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-800 transition-colors"
          >
            <span className="text-2xl mb-1">🔗</span>
            <span className="text-xs font-medium text-blue-900 dark:text-blue-100 text-center">AA API</span>
          </button>
          
          <button
            onClick={testDiscover}
            className="flex flex-col items-center p-3 bg-green-50 dark:bg-green-900 rounded-lg hover:bg-green-100 dark:hover:bg-green-800 transition-colors"
          >
            <span className="text-2xl mb-1">🔍</span>
            <span className="text-xs font-medium text-green-900 dark:text-green-100 text-center">Discover</span>
          </button>
          
          <button
            onClick={testSearch}
            className="flex flex-col items-center p-3 bg-purple-50 dark:bg-purple-900 rounded-lg hover:bg-purple-100 dark:hover:bg-purple-800 transition-colors"
          >
            <span className="text-2xl mb-1">📰</span>
            <span className="text-xs font-medium text-purple-900 dark:text-purple-100 text-center">Search</span>
          </button>
          
          <button
            onClick={testSubscription}
            className="flex flex-col items-center p-3 bg-orange-50 dark:bg-orange-900 rounded-lg hover:bg-orange-100 dark:hover:bg-orange-800 transition-colors"
          >
            <span className="text-2xl mb-1">📋</span>
            <span className="text-xs font-medium text-orange-900 dark:text-orange-100 text-center">Subscription</span>
          </button>
          
          <button
            onClick={testAI}
            className="flex flex-col items-center p-3 bg-pink-50 dark:bg-pink-900 rounded-lg hover:bg-pink-100 dark:hover:bg-pink-800 transition-colors"
          >
            <span className="text-2xl mb-1">🤖</span>
            <span className="text-xs font-medium text-pink-900 dark:text-pink-100 text-center">AI Test</span>
          </button>
        </div>
      </div>
    </div>
  );
}

// Manual Fetch Tab Component
function ManualFetchTab({ onFetch }: { onFetch: (params: any) => void }) {
  const [formData, setFormData] = useState({
    categories: [] as string[],
    keywords: '',
    start_date: '',
    end_date: '',
    limit: 50,
    auto_process: true,
    auto_publish: false
  });

  const categoryOptions = [
    { id: 'politics', name: 'Politika' },
    { id: 'economy', name: 'Ekonomi' },
    { id: 'sports', name: 'Spor' },
    { id: 'technology', name: 'Teknoloji' },
    { id: 'health', name: 'Sağlık' },
    { id: 'culture', name: 'Kültür' },
    { id: 'world', name: 'Dünya' },
    { id: 'local', name: 'Yerel' }
  ];

  const handleCategoryChange = (categoryId: string) => {
    setFormData(prev => ({
      ...prev,
      categories: prev.categories.includes(categoryId)
        ? prev.categories.filter(id => id !== categoryId)
        : [...prev.categories, categoryId]
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onFetch(formData);
  };

  return (
    <div className="space-y-6">
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          📥 Manuel Haber Çekimi
        </h3>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Categories */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Kategoriler
            </label>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
              {categoryOptions.map((category) => (
                <label key={category.id} className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    checked={formData.categories.includes(category.id)}
                    onChange={() => handleCategoryChange(category.id)}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">{category.name}</span>
                </label>
              ))}
            </div>
          </div>

          {/* Keywords */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Anahtar Kelimeler
            </label>
            <input
              type="text"
              value={formData.keywords}
              onChange={(e) => setFormData(prev => ({ ...prev, keywords: e.target.value }))}
              placeholder="seçim, ekonomi, spor (virgülle ayırın)"
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            />
          </div>

          {/* Date Range */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Başlangıç Tarihi
              </label>
              <input
                type="date"
                value={formData.start_date}
                onChange={(e) => setFormData(prev => ({ ...prev, start_date: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Bitiş Tarihi
              </label>
              <input
                type="date"
                value={formData.end_date}
                onChange={(e) => setFormData(prev => ({ ...prev, end_date: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              />
            </div>
          </div>

          {/* Limit */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Maksimum Haber Sayısı
            </label>
            <select
              value={formData.limit}
              onChange={(e) => setFormData(prev => ({ ...prev, limit: parseInt(e.target.value) }))}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            >
              <option value={10}>10</option>
              <option value={25}>25</option>
              <option value={50}>50</option>
              <option value={100}>100</option>
              <option value={200}>200</option>
            </select>
          </div>

          {/* Options */}
          <div className="space-y-3">
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={formData.auto_process}
                onChange={(e) => setFormData(prev => ({ ...prev, auto_process: e.target.checked }))}
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <span className="text-sm text-gray-700 dark:text-gray-300">
                Otomatik AI işleme (önerilen)
              </span>
            </label>
            
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={formData.auto_publish}
                onChange={(e) => setFormData(prev => ({ ...prev, auto_publish: e.target.checked }))}
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <span className="text-sm text-gray-700 dark:text-gray-300">
                Otomatik yayınlama (dikkatli kullanın)
              </span>
            </label>
          </div>

          {/* Submit Button */}
          <button
            type="submit"
            className="w-full flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <span className="mr-2">📥</span>
            Manuel Çekim Başlat
          </button>
        </form>
      </div>

      {/* Preset Actions */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          ⚡ Hızlı Çekim Seçenekleri
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button
            onClick={() => onFetch({
              categories: ['politics'],
              limit: 20,
              auto_process: true,
              auto_publish: false
            })}
            className="p-4 bg-blue-50 dark:bg-blue-900 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-800 transition-colors text-left"
          >
            <div className="text-2xl mb-2">🏛️</div>
            <div className="font-medium text-blue-900 dark:text-blue-100">Politika Haberleri</div>
            <div className="text-sm text-blue-700 dark:text-blue-300">Son 20 politik haber</div>
          </button>
          
          <button
            onClick={() => onFetch({
              categories: ['economy'],
              limit: 15,
              auto_process: true,
              auto_publish: false
            })}
            className="p-4 bg-green-50 dark:bg-green-900 rounded-lg hover:bg-green-100 dark:hover:bg-green-800 transition-colors text-left"
          >
            <div className="text-2xl mb-2">💰</div>
            <div className="font-medium text-green-900 dark:text-green-100">Ekonomi Haberleri</div>
            <div className="text-sm text-green-700 dark:text-green-300">Son 15 ekonomi haberi</div>
          </button>
          
          <button
            onClick={() => onFetch({
              keywords: 'son dakika',
              limit: 10,
              auto_process: true,
              auto_publish: true
            })}
            className="p-4 bg-red-50 dark:bg-red-900 rounded-lg hover:bg-red-100 dark:hover:bg-red-800 transition-colors text-left"
          >
            <div className="text-2xl mb-2">🚨</div>
            <div className="font-medium text-red-900 dark:text-red-100">Son Dakika</div>
            <div className="text-sm text-red-700 dark:text-red-300">Acil haberler (otomatik yayın)</div>
          </button>

          <button
            onClick={() => testAAConnection()}
            className="p-4 bg-purple-50 dark:bg-purple-900 rounded-lg hover:bg-purple-100 dark:hover:bg-purple-800 transition-colors text-left"
          >
            <div className="text-2xl mb-2">🔗</div>
            <div className="font-medium text-purple-900 dark:text-purple-100">Bağlantı Testi</div>
            <div className="text-sm text-purple-700 dark:text-purple-300">AA API bağlantısını test et</div>
          </button>
        </div>
      </div>

      {/* Test Functions */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          🧪 Test Fonksiyonları
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <button
            onClick={() => testDiscover()}
            className="p-4 bg-blue-50 dark:bg-blue-900 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-800 transition-colors text-center"
          >
            <div className="text-2xl mb-2">🔍</div>
            <div className="font-medium text-blue-900 dark:text-blue-100">Discover Test</div>
          </button>
          
          <button
            onClick={() => testSearch()}
            className="p-4 bg-green-50 dark:bg-green-900 rounded-lg hover:bg-green-100 dark:hover:bg-green-800 transition-colors text-center"
          >
            <div className="text-2xl mb-2">📰</div>
            <div className="font-medium text-green-900 dark:text-green-100">Search Test</div>
          </button>
          
          <button
            onClick={() => testSubscription()}
            className="p-4 bg-yellow-50 dark:bg-yellow-900 rounded-lg hover:bg-yellow-100 dark:hover:bg-yellow-800 transition-colors text-center"
          >
            <div className="text-2xl mb-2">📋</div>
            <div className="font-medium text-yellow-900 dark:text-yellow-100">Subscription Test</div>
          </button>
          
          <button
            onClick={() => testAI()}
            className="p-4 bg-purple-50 dark:bg-purple-900 rounded-lg hover:bg-purple-100 dark:hover:bg-purple-800 transition-colors text-center"
          >
            <div className="text-2xl mb-2">🤖</div>
            <div className="font-medium text-purple-900 dark:text-purple-100">AI Test</div>
          </button>
        </div>
      </div>
    </div>
  );
}

// Categories Tab Component
function CategoriesTab({ mappings, onUpdate }: { mappings: CategoryMapping[], onUpdate: () => void }) {
  const [isCreating, setIsCreating] = useState(false);
  const [editingMapping, setEditingMapping] = useState<CategoryMapping | null>(null);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
          🗂️ Kategori Eşleştirmeleri
        </h3>
        <button
          onClick={() => setIsCreating(true)}
          className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          <span className="mr-2">➕</span>
          Yeni Eşleştirme
        </button>
      </div>

      {/* Categories List */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50 dark:bg-gray-700">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  AA Kategorisi
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Site Kategorisi
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Durum
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Otomatik Çekim
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  İşlemler
                </th>
              </tr>
            </thead>
            <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
              {mappings.map((mapping) => (
                <tr key={mapping.id}>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900 dark:text-white">
                      {mapping.aa_category}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900 dark:text-white">
                      {mapping.site_category_display_name || mapping.site_category}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      mapping.is_active
                        ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                        : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                    }`}>
                      {mapping.is_active ? 'Aktif' : 'Pasif'}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      mapping.auto_fetch_enabled
                        ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'
                        : 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200'
                    }`}>
                      {mapping.auto_fetch_enabled ? 'Açık' : 'Kapalı'}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button
                      onClick={() => setEditingMapping(mapping)}
                      className="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 mr-3"
                    >
                      ✏️ Düzenle
                    </button>
                    <button className="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300">
                      🗑️ Sil
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Bulk Actions */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <h4 className="text-lg font-medium text-gray-900 dark:text-white mb-4">
          📦 Toplu İşlemler
        </h4>
        <div className="flex flex-wrap gap-4">
          <button className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
            ✅ Tümünü Aktifleştir
          </button>
          <button className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
            ❌ Tümünü Pasifleştir
          </button>
          <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
            🔄 Otomatik Çekimi Aç
          </button>
          <button className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors">
            🔒 Varsayılan Ayarları Yükle
          </button>
        </div>
      </div>
    </div>
  );
}

// News Management Tab Component
function NewsManagementTab({ news, onUpdate }: { news: News[], onUpdate: () => void }) {
  const [filter, setFilter] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');

  const filteredNews = news.filter(item => {
    const matchesFilter = filter === 'all' || item.status === filter;
    const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesFilter && matchesSearch;
  });

  return (
    <div className="space-y-6">
      {/* Filters */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <div className="flex flex-col md:flex-row gap-4">
          <div className="flex-1">
            <input
              type="text"
              placeholder="Haber ara..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            />
          </div>
          
          <select
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
            className="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          >
            <option value="all">Tüm Haberler</option>
            <option value="published">Yayınlanan</option>
            <option value="draft">Taslak</option>
            <option value="archived">Arşivlenen</option>
          </select>
        </div>
      </div>

      {/* News List */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50 dark:bg-gray-700">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Başlık
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Kategori
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Durum
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  AI
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Tarih
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  İşlemler
                </th>
              </tr>
            </thead>
            <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
              {filteredNews.map((item) => (
                <tr key={item.id}>
                  <td className="px-6 py-4">
                    <div className="text-sm font-medium text-gray-900 dark:text-white line-clamp-2">
                      {item.title}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 capitalize">
                      {item.category}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      item.status === 'published'
                        ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                        : item.status === 'draft'
                        ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
                        : 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200'
                    }`}>
                      {item.status === 'published' ? 'Yayın' : item.status === 'draft' ? 'Taslak' : 'Arşiv'}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {item.ai_enhanced && (
                      <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200">
                        🤖 AI
                      </span>
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                    {new Date(item.published_date).toLocaleDateString('tr-TR')}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button className="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 mr-3">
                      👁️ Görüntüle
                    </button>
                    <button className="text-green-600 hover:text-green-900 dark:text-green-400 dark:hover:text-green-300 mr-3">
                      ✏️ Düzenle
                    </button>
                    <button className="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300">
                      🗑️ Sil
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Bulk Actions */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <h4 className="text-lg font-medium text-gray-900 dark:text-white mb-4">
          📦 Toplu Haber İşlemleri
        </h4>
        <div className="flex flex-wrap gap-4">
          <button className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
            📢 Toplu Yayınla
          </button>
          <button className="px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors">
            📝 Taslağa Çevir
          </button>
          <button className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
            🤖 AI ile İşle
          </button>
          <button className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
            🗑️ Toplu Sil
          </button>
        </div>
      </div>
    </div>
  );
}

// Schedules Tab Component
function SchedulesTab({ schedules, onUpdate }: { schedules: Schedule[], onUpdate: () => void }) {
  const [isCreating, setIsCreating] = useState(false);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
          ⏰ Otomatik Çekim Zamanlamaları
        </h3>
        <button
          onClick={() => setIsCreating(true)}
          className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          <span className="mr-2">➕</span>
          Yeni Zamanlama
        </button>
      </div>

      {/* Current Schedules */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {schedules.map((schedule) => (
          <div key={schedule.id} className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
            <div className="flex items-center justify-between mb-4">
              <h4 className="font-semibold text-gray-900 dark:text-white">{schedule.name}</h4>
              <span className={`w-3 h-3 rounded-full ${schedule.is_active ? 'bg-green-500' : 'bg-gray-400'}`}></span>
            </div>
            
            <div className="space-y-2 text-sm text-gray-600 dark:text-gray-400">
              <div>📂 Kategoriler: {schedule.categories.join(', ')}</div>
              <div>🔄 Sıklık: {schedule.frequency}</div>
              <div>⏰ Sonraki çalışma: {new Date(schedule.next_run).toLocaleString('tr-TR')}</div>
            </div>
            
            <div className="flex justify-between mt-4">
              <button className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">
                ✏️ Düzenle
              </button>
              <button className="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300">
                🗑️ Sil
              </button>
            </div>
          </div>
        ))}
      </div>

      {/* Quick Schedule Templates */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <h4 className="text-lg font-medium text-gray-900 dark:text-white mb-4">
          ⚡ Hızlı Zamanlama Şablonları
        </h4>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button className="p-4 bg-blue-50 dark:bg-blue-900 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-800 transition-colors text-left">
            <div className="text-2xl mb-2">🌅</div>
            <div className="font-medium text-blue-900 dark:text-blue-100">Sabah Haberleri</div>
            <div className="text-sm text-blue-700 dark:text-blue-300">Her gün 09:00'da tüm kategoriler</div>
          </button>
          
          <button className="p-4 bg-green-50 dark:bg-green-900 rounded-lg hover:bg-green-100 dark:hover:bg-green-800 transition-colors text-left">
            <div className="text-2xl mb-2">🌆</div>
            <div className="font-medium text-green-900 dark:text-green-100">Akşam Özeti</div>
            <div className="text-sm text-green-700 dark:text-green-300">Her gün 18:00'da öne çıkanlar</div>
          </button>
          
          <button className="p-4 bg-purple-50 dark:bg-purple-900 rounded-lg hover:bg-purple-100 dark:hover:bg-purple-800 transition-colors text-left">
            <div className="text-2xl mb-2">⚡</div>
            <div className="font-medium text-purple-900 dark:text-purple-100">Saatlik Güncelleme</div>
            <div className="text-sm text-purple-700 dark:text-purple-300">Her saat "son dakika" haberleri</div>
          </button>
        </div>
      </div>
    </div>
  );
}

// AI Settings Tab Component
function AISettingsTab() {
  const [settings, setSettings] = useState({
    auto_enhance: true,
    auto_translate: false,
    seo_optimization: true,
    duplicate_detection: true,
    auto_tagging: true,
    content_quality_check: true,
    gemini_model: 'gemini-pro',
    processing_priority: 'balanced'
  });

  return (
    <div className="space-y-6">
      {/* AI Features */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          🤖 AI Özellikleri
        </h3>
        
        <div className="space-y-4">
          <label className="flex items-center justify-between">
            <div>
              <span className="text-gray-900 dark:text-white font-medium">Otomatik İçerik Geliştirme</span>
              <p className="text-sm text-gray-600 dark:text-gray-400">Haberleri AI ile geliştir ve optimize et</p>
            </div>
            <input
              type="checkbox"
              checked={settings.auto_enhance}
              onChange={(e) => setSettings(prev => ({ ...prev, auto_enhance: e.target.checked }))}
              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
          </label>
          
          <label className="flex items-center justify-between">
            <div>
              <span className="text-gray-900 dark:text-white font-medium">SEO Optimizasyonu</span>
              <p className="text-sm text-gray-600 dark:text-gray-400">Meta description, keywords ve başlık optimizasyonu</p>
            </div>
            <input
              type="checkbox"
              checked={settings.seo_optimization}
              onChange={(e) => setSettings(prev => ({ ...prev, seo_optimization: e.target.checked }))}
              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
          </label>
          
          <label className="flex items-center justify-between">
            <div>
              <span className="text-gray-900 dark:text-white font-medium">Duplicate Detection</span>
              <p className="text-sm text-gray-600 dark:text-gray-400">Benzer haberleri otomatik tespit et ve birleştir</p>
            </div>
            <input
              type="checkbox"
              checked={settings.duplicate_detection}
              onChange={(e) => setSettings(prev => ({ ...prev, duplicate_detection: e.target.checked }))}
              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
          </label>
          
          <label className="flex items-center justify-between">
            <div>
              <span className="text-gray-900 dark:text-white font-medium">Otomatik Etiketleme</span>
              <p className="text-sm text-gray-600 dark:text-gray-400">İçerikten otomatik tag ve kategori çıkarma</p>
            </div>
            <input
              type="checkbox"
              checked={settings.auto_tagging}
              onChange={(e) => setSettings(prev => ({ ...prev, auto_tagging: e.target.checked }))}
              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
          </label>
          
          <label className="flex items-center justify-between">
            <div>
              <span className="text-gray-900 dark:text-white font-medium">İçerik Kalite Kontrolü</span>
              <p className="text-sm text-gray-600 dark:text-gray-400">Haber kalitesini AI ile değerlendir</p>
            </div>
            <input
              type="checkbox"
              checked={settings.content_quality_check}
              onChange={(e) => setSettings(prev => ({ ...prev, content_quality_check: e.target.checked }))}
              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
          </label>
        </div>
      </div>

      {/* Model Settings */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          ⚙️ Model Ayarları
        </h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Gemini Model
            </label>
            <select
              value={settings.gemini_model}
              onChange={(e) => setSettings(prev => ({ ...prev, gemini_model: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            >
              <option value="gemini-pro">Gemini Pro (Önerilen)</option>
              <option value="gemini-pro-vision">Gemini Pro Vision</option>
              <option value="gemini-ultra">Gemini Ultra (Premium)</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              İşleme Önceliği
            </label>
            <select
              value={settings.processing_priority}
              onChange={(e) => setSettings(prev => ({ ...prev, processing_priority: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            >
              <option value="fast">Hızlı (Daha az detay)</option>
              <option value="balanced">Dengeli (Önerilen)</option>
              <option value="quality">Kalite (Daha yavaş, daha detaylı)</option>
            </select>
          </div>
        </div>
      </div>

      {/* AI Statistics */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          📊 AI İstatistikleri
        </h3>
        
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">1,247</div>
            <div className="text-sm text-gray-600 dark:text-gray-400">İşlenen Haber</div>
          </div>
          
          <div className="text-center">
            <div className="text-2xl font-bold text-green-600 dark:text-green-400">94%</div>
            <div className="text-sm text-gray-600 dark:text-gray-400">Başarı Oranı</div>
          </div>
          
          <div className="text-center">
            <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">32</div>
            <div className="text-sm text-gray-600 dark:text-gray-400">Duplicate Tespit</div>
          </div>
          
          <div className="text-center">
            <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">2.3s</div>
            <div className="text-sm text-gray-600 dark:text-gray-400">Ortalama Süre</div>
          </div>
        </div>
      </div>

      {/* Save Settings */}
      <div className="flex justify-end">
        <button className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
          💾 Ayarları Kaydet
        </button>
      </div>
    </div>
  );
}
